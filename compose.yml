name: colandr-back

services:
  db:
    container_name: colandr-db
    restart: always
    image: "postgres:10"
    stop_grace_period: 5s
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file: ".env"
    environment:
      - POSTGRES_USER=${COLANDR_DB_USER}
      - POSTGRES_PASSWORD=${COLANDR_DB_PASSWORD}
      - POSTGRES_DB=${COLANDR_DB_NAME}
      - PGDATA=/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U ${COLANDR_DB_USER} -d ${COLANDR_DB_NAME}"
      interval: 10s
      timeout: 5s
      retries: 5
  broker:
    container_name: colandr-broker
    restart: always
    image: "redis:6.0"
    stop_grace_period: 5s
    volumes:
      - "redis:/data"
    ports:
      - "6379:6379"
  api:
    container_name: colandr-api
    build:
      context: "."
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_started
    stop_signal: SIGINT
    env_file: ".env"
    environment:
      - FLASK_APP=colandr.app:create_app()
      - COLANDR_DATABASE_URI=postgresql://colandr_app:colandr@colandr-db:5432/colandr
    volumes:
      - .:/app
    ports:
      - 5001:5000
    command: "flask run --host 0.0.0.0 --port 5000"
  worker:
    container_name: colandr-worker
    build:
      context: "."
      dockerfile: Dockerfile
    depends_on:
      - db
      - broker
    stop_signal: SIGINT
    env_file: ".env"
    environment:
      - FLASK_APP=colandr.app:create_app()
      - COLANDR_DATABASE_URI=postgresql://colandr_app:colandr@colandr-db:5432/colandr
      - COLANDR_CELERY_BROKER_URL=redis://colandr-broker:6379/0
      - COLANDR_CELERY_RESULT_BACKEND=redis://colandr-broker:6379/0
    command: "celery worker --app=celery_worker.celery"

volumes:
  postgres: {}
  redis: {}
