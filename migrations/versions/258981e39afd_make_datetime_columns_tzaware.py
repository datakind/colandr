"""make datetime columns tzaware

Revision ID: 258981e39afd
Revises: 9a941c4cd94e
Create Date: 2023-12-19 03:10:26.656396

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "258981e39afd"
down_revision = "9a941c4cd94e"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("citation_screenings", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("citations", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("data_extractions", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("data_sources", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("dedupes", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("fulltext_screenings", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("fulltexts", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("imports", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("review_plans", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("review_user_assoc", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("reviews", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("studies", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "last_updated",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            existing_server_default=sa.text(
                "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"
            ),
            server_default=sa.func.now(),
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("studies", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("reviews", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("review_user_assoc", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("review_plans", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("imports", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("fulltexts", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("fulltext_screenings", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("dedupes", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("data_sources", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("data_extractions", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("citations", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    with op.batch_alter_table("citation_screenings", schema=None) as batch_op:
        batch_op.alter_column(
            "last_updated",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            existing_server_default=sa.func.now(),
            server_default=sa.text("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)"),
        )

    # ### end Alembic commands ###
